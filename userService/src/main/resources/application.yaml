server:
  port: 8081

spring:
  application:
    name: USER-SERVICE
  datasource:
    url: jdbc:mysql://localhost:3306/hotel_service
    username: root
    password: Rohit@123
    driver-class-name: com.mysql.cj.jdbc.Driver

#default is dev
#  profiles:
#    active: dev


  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
  config:
    import: optional:configserver:http://localhost:8085

#import=optional:configserver:
#When you use optional:configserver:, it means that if the Config Server
# is available, Spring Boot will attempt to load configuration properties
# from it. If the Config Server is not available or encounters an issue,
# it won't prevent the application from starting. The application will
# continue to start with the local configuration or any other configuration
# sources you might have.




#eureka:
#  client:
#    fetch-registry: true
#    register-with-eureka: true
#    service-url:
#      defaultZone: http://localhost:8761/eureka
#  instance:
#    prefer-ip-address: true

management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health

  endpoint:
    health:
      show-details: always

resilience4j:
  circuitbreaker:
    instances:
      ratingHotelBreaker:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 6s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED

  retry:
    instances:
      ratingHotelService:
        maxAttempts: 3
        waitDuration: 5s






